// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WineCardAppVersionFour;

#nullable disable

namespace WineCardAppVersionFour.Migrations
{
    [DbContext(typeof(DbContextWineCardApp))]
    [Migration("20240902113902_asdfasdf migration")]
    partial class asdfasdfmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WineCardAppVersionFour.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            HashPassword = "$2a$11$nztoHBuEuQpP4TGqjaDst.E/RK/zhN59KSqxq9ma.RB67bAeh3kMq",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.GrapeVariety", b =>
                {
                    b.Property<int>("GrapeVarietyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GrapeVarietyId"));

                    b.Property<string>("GrapeVarietyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("GrapeVarietyId");

                    b.ToTable("GrapeVarieties");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.Vintage", b =>
                {
                    b.Property<int>("VintageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VintageId"));

                    b.Property<int>("VintageYear")
                        .HasColumnType("int");

                    b.HasKey("VintageId");

                    b.ToTable("Vintages");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.Wine", b =>
                {
                    b.Property<int>("WineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineId"));

                    b.Property<int>("GrapeVarietyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("VintageId")
                        .HasColumnType("int");

                    b.Property<int>("WineCardId")
                        .HasColumnType("int");

                    b.Property<string>("WineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WineTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WineryId")
                        .HasColumnType("int");

                    b.HasKey("WineId");

                    b.HasIndex("GrapeVarietyId");

                    b.HasIndex("VintageId");

                    b.HasIndex("WineCardId");

                    b.HasIndex("WineTypeId");

                    b.HasIndex("WineryId");

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineCard", b =>
                {
                    b.Property<int>("WineCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineCardId"));

                    b.HasKey("WineCardId");

                    b.ToTable("WineCards");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineCountry", b =>
                {
                    b.Property<int>("WineCountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineCountryId"));

                    b.Property<string>("WineCountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WineCountryId");

                    b.ToTable("WinesCountries");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineRegion", b =>
                {
                    b.Property<int>("WineRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineRegionId"));

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WineCountryId")
                        .HasColumnType("int");

                    b.HasKey("WineRegionId");

                    b.HasIndex("WineCountryId");

                    b.ToTable("WineRegions");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineType", b =>
                {
                    b.Property<int>("WineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineTypeId"));

                    b.Property<string>("WineTypeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("WineTypeId");

                    b.ToTable("WineTypes");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.Winery", b =>
                {
                    b.Property<int>("WineryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineryId"));

                    b.Property<int>("WineRegionId")
                        .HasColumnType("int");

                    b.Property<string>("WineryName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("WineryId");

                    b.HasIndex("WineRegionId");

                    b.ToTable("Wineries");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.Wine", b =>
                {
                    b.HasOne("WineCardAppVersionFour.Entities.GrapeVariety", "GrapeVariety")
                        .WithMany("Wines")
                        .HasForeignKey("GrapeVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCardAppVersionFour.Entities.Vintage", "Vintage")
                        .WithMany("Wines")
                        .HasForeignKey("VintageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCardAppVersionFour.Entities.WineCard", "WineCard")
                        .WithMany("Wines")
                        .HasForeignKey("WineCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCardAppVersionFour.Entities.WineType", "WineType")
                        .WithMany("Wines")
                        .HasForeignKey("WineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCardAppVersionFour.Entities.Winery", "Winery")
                        .WithMany("Wines")
                        .HasForeignKey("WineryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrapeVariety");

                    b.Navigation("Vintage");

                    b.Navigation("WineCard");

                    b.Navigation("WineType");

                    b.Navigation("Winery");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineRegion", b =>
                {
                    b.HasOne("WineCardAppVersionFour.Entities.WineCountry", "WineCountry")
                        .WithMany("WineRegions")
                        .HasForeignKey("WineCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WineCountry");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.Winery", b =>
                {
                    b.HasOne("WineCardAppVersionFour.Entities.WineRegion", "WineRegion")
                        .WithMany("Wineries")
                        .HasForeignKey("WineRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WineRegion");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.GrapeVariety", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.Vintage", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineCard", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineCountry", b =>
                {
                    b.Navigation("WineRegions");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineRegion", b =>
                {
                    b.Navigation("Wineries");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.WineType", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("WineCardAppVersionFour.Entities.Winery", b =>
                {
                    b.Navigation("Wines");
                });
#pragma warning restore 612, 618
        }
    }
}
